name: CI/CD

on:
  push:
    branches: [ aws_cicd, main, master ]
  pull_request:
    branches: [ aws_cicd, main, master ]
  # permet de déclencher manuellement le workflow depuis l'interface Actions
  workflow_dispatch:

permissions:
  contents: read
  packages: write
  id-token: write

jobs:
  test:
    name: Test & Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Test
        run: npm test

      - name: Build (si présent)
        run: npm run build --if-present

      - name: Upload build artifact
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: ./build

  docker-build-and-push:
    name: Build and push Docker image
    needs: test
    runs-on: ubuntu-latest
    # ne pousse l'image que sur branches de déploiement (aws_cicd, main, master)
    if: github.ref == 'refs/heads/aws_cicd' || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set lowercase owner
        # convertit github.repository_owner en minuscules (compatible avec GHCR)
        run: |
          echo "OWNER_LOWER=$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          # IMPORTANT: utiliser la variable env OWNER_LOWER (définie ci-dessus) pour éviter l'erreur de casse
          tags: |
            ghcr.io/${{ env.OWNER_LOWER }}/elden-ring-website:latest
            ghcr.io/${{ env.OWNER_LOWER }}/elden-ring-website:${{ github.sha }}
          file: ./Dockerfile
          build-args: |
            NODE_ENV=production

  deploy:
    name: Deploy to Google App Engine
    needs: test
    runs-on: ubuntu-latest
    # déploiement App Engine depuis main, master, aws_cicd ou via exécution manuelle
    if: github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.ref == 'refs/heads/aws_cicd'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Check required secrets (do not fail CI, set SKIP_DEPLOY)
        run: |
          skip=false
          missing=""
          if [ -z "${{ secrets.DOTENV }}" ]; then missing="${missing} DOTENV"; skip=true; fi
          if [ -z "${{ secrets.GCP_SA_KEY }}" ]; then missing="${missing} GCP_SA_KEY"; skip=true; fi
          if [ -z "${{ secrets.GCP_PROJECT }}" ]; then missing="${missing} GCP_PROJECT"; skip=true; fi
          if [ "$skip" = true ]; then
            echo "Missing required secrets:${missing}" >&2
            echo "SKIP_DEPLOY=true" >> $GITHUB_ENV
          else
            echo "SKIP_DEPLOY=false" >> $GITHUB_ENV
          fi

      - name: Create .env from secret
        if: ${{ env.SKIP_DEPLOY != 'true' }}
        run: |
          printf '%s' "${{ secrets.DOTENV }}" > .env
          echo ".env created with secrets.DOTENV (masked)."

      - name: Install dependencies and build frontend+server
        if: ${{ env.SKIP_DEPLOY != 'true' }}
        run: |
          npm ci
          npm run build
          npm run build:server

      - name: Install gcloud SDK
        if: ${{ env.SKIP_DEPLOY != 'true' }}
        uses: google-github-actions/setup-gcloud@v1
        with:
          # installe la dernière version du SDK
          version: 'latest'

      - name: Write GCP service account key to file
        if: ${{ env.SKIP_DEPLOY != 'true' }}
        run: |
          set -euo pipefail

          KEY_PATH="$RUNNER_TEMP/gcp-key.json"
          echo "Attempting to write GCP service account key to $KEY_PATH (contents are not printed)."

          # Prefer base64 secret if fourni (évite problèmes de newline/escaping)
          if [ -n "${{ secrets.GCP_SA_KEY_BASE64 }}" ]; then
            echo "Using GCP_SA_KEY_BASE64 (base64) secret."
            printf '%s' "${{ secrets.GCP_SA_KEY_BASE64 }}" | tr -d '\r' | base64 --decode > "$KEY_PATH" || {
              echo "ERROR: failed to decode GCP_SA_KEY_BASE64; ensure it is valid base64." >&2
              exit 1
            }
          elif [ -n "${{ secrets.GCP_SA_KEY }}" ]; then
            echo "Using GCP_SA_KEY secret (raw JSON). Writing safely and attempting validation."
            # write raw, removing CR
            printf '%s' "${{ secrets.GCP_SA_KEY }}" | tr -d '\r' > "$KEY_PATH" || {
              echo "ERROR: failed to write GCP_SA_KEY to file." >&2
              exit 1
            }

            # if JSON invalid, try interpreting escaped \n sequences into real newlines
            if ! python -c "import json,sys; json.load(open('$KEY_PATH'))" >/dev/null 2>&1; then
              echo "Raw JSON invalid. Attempting to unescape backslash-n sequences and retry."
              printf '%b' "${{ secrets.GCP_SA_KEY }}" | tr -d '\r' > "$KEY_PATH" || {
                echo "ERROR: failed to write unescaped GCP_SA_KEY to file." >&2
                exit 1
              }
            fi
          else
            echo "ERROR: No GCP service account secret found (neither GCP_SA_KEY nor GCP_SA_KEY_BASE64)." >&2
            echo "Please add the secret in Settings → Secrets and variables → Actions and re-run the workflow." >&2
            exit 1
          fi

          chmod 600 "$KEY_PATH"
          echo "GCP_KEY_PATH=$KEY_PATH" >> $GITHUB_ENV

          # validation finale du JSON
          if ! python -c "import json,sys; json.load(open('$KEY_PATH'))" >/dev/null 2>&1; then
            echo "ERROR: GCP service account key file was written but is not valid JSON." >&2
            echo "Consider creating a base64-encoded secret (base64 -w0 key.json) and set it to GCP_SA_KEY_BASE64." >&2
            exit 1
          fi

      - name: Authenticate to GCP (activate service account) and set project
        if: ${{ env.SKIP_DEPLOY != 'true' }}
        env:
          GCP_KEY_PATH: ${{ env.GCP_KEY_PATH }}
        run: |
          # active le compte de service explicitement et définit le projet
          gcloud auth activate-service-account --key-file="$GCP_KEY_PATH"
          gcloud config set project "${{ secrets.GCP_PROJECT }}"

      - name: Deploy to App Engine
        if: ${{ env.SKIP_DEPLOY != 'true' }}
        run: |
          gcloud app deploy --quiet

      - name: Skip deploy message
        if: ${{ env.SKIP_DEPLOY == 'true' }}
        run: |
          echo "Skipping Google App Engine deploy because required secrets are missing:"
          echo " - DOTENV (secret DOTENV)"
          echo " - GCP_SA_KEY (service account JSON)"
          echo " - GCP_PROJECT (project id)"
          echo "Add them in Settings → Secrets and Variables → Actions, then re-run the workflow."
